input Social {
  github: String
  facebook: String
  twitter: String
  instagram: String
}

type TypeSocial {
  github: String
  facebook: String
  twitter: String
  instagram: String
}

type Author {
  id: Int
  username: String
  email: String
  fname: String!
  lname: String!
  social: TypeSocial
  role: Role
  bio: String
  avatar: String
}

type LoginResponse {
  ok: Boolean!
  token: String
  data: Author
  errors: [Error!]
}

type ForgotPasswordResponse {
  ok: Boolean!
  msg: String
}

type AuthorResponse {
  ok: Boolean!
  errors: [Error!]
  data: Author
}

type CreateAuthorResponse {
  ok: Boolean!
  errors: [Error!]
}

input InputAuthor {
  id: Int!
  email: String
  fname: String
  lname: String
  bio: String
  social: Social
  password: String
  roleId: Int
  avatar: String
}

type Query {
  author(id: Int!, username: String): Author!
  authors: [Author!]!
  me: Author
  validateToken: CreateAuthorResponse
  media(filters: MediaFiltersWithPagination): MediaNode!
  post(filters: SinglePostFilters): Post!
  posts(filters: PostFiltersWithPagination): PostNode!
  adjacentPosts(slug: String): AdjacentPosts
  search(filters: SearchFilters!): SearchOutput
  stats: Stats
  roles: [Role!]!
  settings(option: String): [Setting!]!
  taxonomies(type: TaxonomyTypes, name: String): [Taxonomy!]!
  activeTaxonomies(type: TaxonomyTypes, postType: String): [Taxonomy]!
  themes(name: String): [Theme!]!
}

type Mutation {
  register(username: String!, password: String!, email: String!): AuthorResponse!
  login(username: String, email: String, password: String!, remember: Boolean): LoginResponse!
  forgotPassword(email: String!): ForgotPasswordResponse!
  resetPassword(password: String!, token: String!): ForgotPasswordResponse!
  updateAuthor(author: InputAuthor!): AuthorResponse
  createAuthor(email: String!, fname: String, lname: String, roleName: EnumRoles): CreateAuthorResponse!
  sendMail(to: String!, subject: String, body: String): Boolean
  insertMedia(url: String): Media
  deleteMedia(ids: [Int!]!): DeleteResponse
  updateMedia(id: Int!, name: String, description: String): UpdateResponse
  createPost(data: InputCreatePost): Response!
  updatePost(data: InputUpdatePost): Response!
  deletePosts(ids: [Int!], deleteFromSystem: Boolean): Response!
  uploadFile(id: Int, cover_image: String): Response!
  updateOptions(options: [OptionInputType]): [Setting!]!
  updateTaxonomy(id: Int!, name: String, desc: String, type: TaxonomyTypes!, slug: String): EditTaxResponse!
  deleteTaxonomy(id: Int!): EditTaxResponse!
  updateThemes(name: String!, settings: [InputThemeSettings!]!): Boolean!
  insertThemes(name: String!, settings: [InputThemeSettings!]!): Boolean!
}

type Error {
  path: String!
  message: String
}

type Media {
  id: Int!
  authorId: Int!
  url: String!
  createdAt: Date!
  name: String
  description: String
}

type MediaNode {
  count: Int!
  rows: [Media!]!
}

type DeleteResponse {
  ok: Boolean!
}

type UpdateResponse {
  ok: Boolean!
  errors: [Error]
}

input MediaFiltersWithPagination {
  id: Int
  cursor: Int
  limit: Int
  page: Int
}

scalar Date

enum PostStatusOptions {
  publish
  draft
  trash
}

type Post {
  id: Int!
  title: String!
  body: String!
  author: Author!
  excerpt: String!
  cover_image: String!
  type: String!
  status: String!
  slug: String!
  mode: String!
  createdAt: Date!
  publishedAt: Date!
  updatedAt: Date!
  taxonomies: [Taxonomy]!
}

input InputCreatePost {
  title: String
  body: String
  authorId: Int
  excerpt: String
  cover_image: String
  type: String
  status: PostStatusOptions
  slug: String
  taxonomies: [TaxonomyInputType]
}

input InputUpdatePost {
  id: Int!
  title: String
  body: String
  authorId: Int
  excerpt: String
  cover_image: String
  type: String
  status: PostStatusOptions
  slug: String
  taxonomies: [TaxonomyInputType]
}

type PostNode {
  count: Int!
  rows: [Post!]!
}

type PostTaxonomyNode {
  count: Int
  rows: [Post]
}

type AdjacentPosts {
  previous: Post
  next: Post
}

input TaxonomyInputType {
  id: Int
  name: String
  type: String
  slug: String
}

type Response {
  ok: Boolean!
  post: Post
  errors: [Error!]
}

type PostStatus {
  published: Int
  drafts: Int
}

type Stats {
  posts: PostStatus
  pages: PostStatus
  tags: Int
  categories: Int
}

type SearchResult {
  id: Int
  title: String
  excerpt: String
  publishedAt: Date
  slug: String
}

type SearchOutput {
  ok: Boolean
  count: Int
  rows: [SearchResult]
}

enum PostSortBy {
  newest
  oldest
}

enum PostTypes {
  page
  post
}

enum MenuTypes {
  category
  page
}

input PostFilters {
  tag: String
  category: String
  authorName: String
  sortBy: PostSortBy
  status: PostStatusOptions
  author: String
  query: String
  type: PostTypes
}

enum FilterKeys {
  tag
  category
  authorName
}

input PostFiltersWithPagination {
  tag: String
  category: String
  categorySlug: String
  tagSlug: String
  authorName: String
  sortBy: PostSortBy
  status: PostStatusOptions
  author: String
  query: String
  type: PostTypes
  cursor: Int
  limit: Int
  page: Int
}

input SearchFilters {
  query: String
  tag: String
  category: String
  cursor: Int
  page: Int
  limit: String
}

input SinglePostFilters {
  id: Int
  slug: String
}

enum EnumRoles {
  ADMIN
  REVIEWER
  AUTHOR
  READER
}

enum EnumPermissions {
  READ_ONLY_POSTS
  MANAGE_ALL_POSTS
  MANAGE_USERS
  MANAGE_SETTINGS
}

type Role {
  id: Int
  name: EnumRoles
  permissions: [Permission]
}

type Permission {
  id: Int!
  name: String!
}

enum SettingOptions {
  site_title
  site_tagline
  site_email
  site_url
  site_footer
  site_description
  social_twitter
  social_facebook
  social_instagram
  social_github
  text_notfound
  text_posts_empty
  displayAuthorInfo
  site_logo
  menu
  css
  google_analytics
  locale
  theme
  disqus_id
  banner
}

type Setting {
  id: Int!
  option: SettingOptions!
  value: String!
}

input OptionInputType {
  id: Int
  option: SettingOptions
  value: String
}

enum TaxonomyTypes {
  post_tag
  post_category
}

type Taxonomy {
  id: Int!
  name: String!
  type: TaxonomyTypes!
  desc: String
  slug: String!
}

type EditTaxResponse {
  ok: Boolean!
  id: Int
  errors: [Error!]
}

enum ThemeSettingsUITags {
  input
  select
}

enum ThemeSettingsUIInputTypes {
  radio
  text
  checkbox
}

type ThemeSettings {
  name: String!
  type: ThemeSettingsUIInputTypes!
  tag: ThemeSettingsUITags!
  options: [String]
  placeholder: String
  defaultValue: String
  changedValue: String
  selectedValue: String
  label: String!
  helpText: String
}

input InputThemeSettings {
  name: String!
  type: ThemeSettingsUIInputTypes!
  tag: ThemeSettingsUITags!
  options: [String]
  placeholder: String
  defaultValue: String
  changedValue: String
  selectedValue: String
  label: String!
  helpText: String
}

type Theme {
  name: String!
  settings: [ThemeSettings!]!
}

schema {
  query: Query
  mutation: Mutation
}
